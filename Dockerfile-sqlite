# Multi-stage Docker build for production deployment
FROM node:20-alpine AS development-dependencies-env

# Install build dependencies for native modules
RUN apk add --no-cache python3 make g++

COPY . /app
WORKDIR /app
RUN npm ci

FROM node:20-alpine AS production-dependencies-env

# Install build dependencies for native modules
RUN apk add --no-cache python3 make g++

COPY ./package.json package-lock.json /app/
WORKDIR /app
RUN npm ci --omit=dev

FROM node:20-alpine AS build-env

# Install build dependencies for native modules
RUN apk add --no-cache python3 make g++

COPY . /app/
COPY --from=development-dependencies-env /app/node_modules /app/node_modules
WORKDIR /app
RUN npm run build

FROM node:20-alpine

# Install runtime dependencies for SQLite
RUN apk add --no-cache sqlite

# Create data directory for SQLite database
RUN mkdir -p /app/data

COPY ./package.json package-lock.json /app/
COPY --from=production-dependencies-env /app/node_modules /app/node_modules
COPY --from=build-env /app/build /app/build
WORKDIR /app

# Set environment variables
ENV DATABASE_PATH=/app/data/tasks.db
ENV NODE_ENV=production
ENV PORT=3000

# Expose port
EXPOSE 3000

# Create a volume for persistent data
VOLUME ["/app/data"]

CMD ["npm", "run", "start"]
